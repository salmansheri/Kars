services:
  auction-svc:
    image: salman484/auction-svc:latest 
    build: 
      context: .
      dockerfile: AuctionService/Dockerfile

    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Server=db:5432;Database=AuctionDB;User Id=postgres;Password=log
      - IdentityServiceUrl=http://identity-svc
      
    ports:
      - 5198:80

    depends_on:
      db:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy

    networks:
      - rabbitnet

  search-svc:
    image: salman484/search-svc:latest 
    build: 
      context: .
      dockerfile: SearchService/Dockerfile

    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__MongodbConnection=mongodb://root:mongopw@mongodb:27017
      - AuctionServiceUrl=http://auction-svc
      
    ports:
      - 5017:80

    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    
    networks:
      - rabbitnet

  identity-svc:
    image: salman484/identity-svc:latest 
    build: 
      context: .
      dockerfile: IdentityService/Dockerfile

    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=db:5432;Database=IdentityDB;User Id=postgres;Password=log
      
      
    ports:
      - 5001:80

    depends_on:
      db:
        condition: service_healthy
    
    
    networks:
      - rabbitnet


  gateway-svc:
    image: salman484/gateway-svc:latest 
    build: 
      context: .
      dockerfile: GatewayService/Dockerfile

    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=db:5432;Database=IdentityDB;User Id=postgres;Password=log
      
      
    ports:
      - 5003:80

    

    networks:
      - rabbitnet
      

    

  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    ports:
      - 5432:5432
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: log

    networks:
      - rabbitnet
    
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 3

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080

  #   networks:
  #     - rabbitnet


  mongodb:
    image: mongo 
    environment: 
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopw 

    ports:
      - 27017:27017

    volumes: 
      - mongodata:/var/lib/mongodb/data

    networks:
      - rabbitnet
    
    
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--quiet",
          "127.0.0.1/test",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 5
      
      

    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

    networks:
      - rabbitnet


      


networks:
  rabbitnet:
    driver: bridge      


volumes:
  mongodata:
